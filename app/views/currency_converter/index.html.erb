<div>
  <%= render "layouts/sidebar" %>
</div>

<div class="flex-1 p-10 lg:ml-64 min-h-dvh bg-gray-50">
  <h1 class="text-2xl font-semibold mb-6">Currency Converter</h1>

 <%= form_with url: "/currency_converter/convert", method: :post, local: true, data: { turbo: false }, class: "space-y-6" do |form| %>
  
  <!-- From & To Currency (side by side on md+, stacked on mobile) -->
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <!-- From Currency -->
    <div>
      <%= form.label :from_currency, "From Currency", class: "block text-sm font-medium text-gray-700 mb-1" %>
      <%= render "currency_converter/currency_dropdown", name: "from_currency" %>
    </div>

    <!-- To Currency -->
    <div>
      <%= form.label :to_currency, "To Currency", class: "block text-sm font-medium text-gray-700 mb-1" %>
      <%= render "currency_converter/currency_dropdown", name: "to_currency" %>
    </div>
  </div>

  <!-- Amount -->
  <div>
    <%= form.label :amount, "Amount", class: "block text-sm font-medium text-gray-700 mb-1" %>
    <%= form.number_field :amount,
        step: 0.01,
        min: 0,
        required: true,
        value: @original_amount,
        class: "w-full rounded-lg border border-gray-300 bg-white p-2 focus:ring-2 focus:ring-blue-500 focus:outline-none" %>
  </div>

  <!-- Submit -->
  <div>
    <%= form.submit "Convert", class: "bg-blue-600 text-white px-5 py-2 rounded-lg shadow hover:bg-blue-700 transition" %>
  </div>
<% end %>


  <% if @converted_amount %>
    <div class="mt-6 p-4 bg-white border border-gray-200 rounded-lg shadow">
      <h3 class="text-lg font-medium mb-2">Conversion Result</h3>
      <p class="text-gray-700 flex items-center gap-2">
        <strong><%= number_with_precision(@original_amount, precision: 2) %> <%= @from_currency %></strong>
        <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path d="M8 3 4 7l4 4"/>
          <path d="M4 7h16"/>
          <path d="m16 21 4-4-4-4"/>
          <path d="M20 17H4"/>
        </svg>
        <strong class="text-green-600"><%= number_with_precision(@converted_amount, precision: 2) %> <%= @to_currency %></strong>
      </p>
    </div>
  <% end %>

  <% if flash[:error] %>
    <div class="mt-4 bg-red-100 border border-red-300 text-red-700 px-4 py-2 rounded-lg">
      <%= flash[:error] %>
    </div>
  <% end %>

  <style>
  .custom-dropdown .options {
    display: none;
  }
  .custom-dropdown.open .options {
    display: block;
  }
  </style>


  <script>
function initializeDropdowns() {
  document.querySelectorAll(".custom-dropdown").forEach(dropdown => {
    const selected = dropdown.querySelector(".selected");
    const options = dropdown.querySelector(".options");
    const hiddenInput = dropdown.querySelector("input[type='hidden']");

    // Remove existing event listeners to prevent duplicates
    if (dropdown.dataset.initialized === "true") {
      return;
    }

    selected.addEventListener("click", () => {
      dropdown.classList.toggle("open");
    });

    options.querySelectorAll(".option").forEach(option => {
      option.addEventListener("click", () => {
        const value = option.getAttribute("data-value");
        const flag = option.getAttribute("data-flag");
        const name = option.getAttribute("data-name");

        // Update selected content with flag and currency info
        selected.innerHTML = `
          <div class="flex items-center">
            <img src="${flag}" alt="${name}" class="w-5 h-4 mr-2">
            <span class="text-gray-700">${value} - ${name}</span>
          </div>
          <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 text-gray-500 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
          </svg>
        `;

        // Update classes for proper layout
        selected.classList.remove("justify-start");
        selected.classList.add("justify-between");

        hiddenInput.value = value;
        dropdown.classList.remove("open");
      });
    });

    document.addEventListener("click", (e) => {
      if (!dropdown.contains(e.target)) {
        dropdown.classList.remove("open");
      }
    });

    // Mark as initialized
    dropdown.dataset.initialized = "true";
  });
}

// Listen for both DOMContentLoaded and Turbo events
document.addEventListener("DOMContentLoaded", initializeDropdowns);
document.addEventListener("turbo:load", initializeDropdowns);
document.addEventListener("turbo:render", initializeDropdowns);
</script>


</div>
